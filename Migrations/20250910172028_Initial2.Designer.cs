// <auto-generated />
using System;
using CSExam.Entites;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CsharpExam.Migrations
{
    [DbContext(typeof(CSExamDbContext))]
    [Migration("20250910172028_Initial2")]
    partial class Initial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserID");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("CSExam.Entites.Trip", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("CSExam.Entites.TripPoints", b =>
                {modelBuilder);

            modelBuilder.Entity("CSExam.Entites.Point", b =>
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PointID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("PointID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserID");

                    b.ToTable("TripPoints");
                });

            modelBuilder.Entity("CSExam.Entites.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CSExam.Entites.Point", b =>
                {
                    b.HasOne("CSExam.Entites.Trip", null)
                        .WithMany("Points")
                        .HasForeignKey("TripID");

                    b.HasOne("CSExam.Entites.User", "User")
                        .WithMany("Points")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSExam.Entites.Trip", b =>
                {
                    b.HasOne("CSExam.Entites.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSExam.Entites.TripPoints", b =>
                {
                    b.HasOne("CSExam.Entites.Point", "Point")
                        .WithMany("TripPoints")
                        .HasForeignKey("PointID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CSExam.Entites.Trip", "Trip")
                        .WithMany("TripPoints")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CSExam.Entites.User", "User")
                        .WithMany("TripPoints")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Point");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSExam.Entites.Point", b =>
                {
                    b.Navigation("TripPoints");
                });

            modelBuilder.Entity("CSExam.Entites.Trip", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("TripPoints");
                });

            modelBuilder.Entity("CSExam.Entites.User", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("TripPoints");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
